
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020e  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void) {

	DDRB = 0xFF; // Set port B as output
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4

	ADMUX = 0; // Select ADC0 for input
  84:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0x87; // ADC enable, Set division factor to 128
  88:	87 e8       	ldi	r24, 0x87	; 135
  8a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	TCCR1B = 0x1B; // Set fast PWM mode and prescaler 64
  8e:	8b e1       	ldi	r24, 0x1B	; 27
  90:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1A = 0x82; // Set Non-inverted PWM
  94:	82 e8       	ldi	r24, 0x82	; 130
  96:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	ICR1 = 2500; // Top
  9a:	84 ec       	ldi	r24, 0xC4	; 196
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	while (1)
	{
		ADCSRA |= (1 << ADSC); // ADC start conversion
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
		while((!ADCSRA) &(1<<ADIF)); // Wait for conversion
		OCR1A = ADC / 3; // Rotate 180 to 180 degrees by reaching potentiometer value
  aa:	48 e7       	ldi	r20, 0x78	; 120
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	c8 e8       	ldi	r28, 0x88	; 136
  b0:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR1A = 0x82; // Set Non-inverted PWM
	ICR1 = 2500; // Top
	
	while (1)
	{
		ADCSRA |= (1 << ADSC); // ADC start conversion
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
		while((!ADCSRA) &(1<<ADIF)); // Wait for conversion
  b8:	80 81       	ld	r24, Z
		OCR1A = ADC / 3; // Rotate 180 to 180 degrees by reaching potentiometer value
  ba:	da 01       	movw	r26, r20
  bc:	2d 91       	ld	r18, X+
  be:	3c 91       	ld	r19, X
  c0:	ab ea       	ldi	r26, 0xAB	; 171
  c2:	ba ea       	ldi	r27, 0xAA	; 170
  c4:	0e 94 69 00 	call	0xd2	; 0xd2 <__umulhisi3>
  c8:	96 95       	lsr	r25
  ca:	87 95       	ror	r24
  cc:	99 83       	std	Y+1, r25	; 0x01
  ce:	88 83       	st	Y, r24
  d0:	f0 cf       	rjmp	.-32     	; 0xb2 <main+0x32>

000000d2 <__umulhisi3>:
  d2:	a2 9f       	mul	r26, r18
  d4:	b0 01       	movw	r22, r0
  d6:	b3 9f       	mul	r27, r19
  d8:	c0 01       	movw	r24, r0
  da:	a3 9f       	mul	r26, r19
  dc:	70 0d       	add	r23, r0
  de:	81 1d       	adc	r24, r1
  e0:	11 24       	eor	r1, r1
  e2:	91 1d       	adc	r25, r1
  e4:	b2 9f       	mul	r27, r18
  e6:	70 0d       	add	r23, r0
  e8:	81 1d       	adc	r24, r1
  ea:	11 24       	eor	r1, r1
  ec:	91 1d       	adc	r25, r1
  ee:	08 95       	ret

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
